{
  "title": "🚀 Python Project Test Automation Report",
  "generated": "2025-09-14 06:03:36",
  "model_name": "llama-3.3-70b-versatile",
  "execution_time_seconds": 0.452642,
  "status": "FAILED",
  "changed_files": [
    "ci_pr_test_runner.py",
    "reports/run_summary.txt",
    "tests_pr/pr_generated_tests.py"
  ],
  "syntax_validation": {
    "ci_pr_test_runner.py": true,
    "tests_pr/pr_generated_tests.py": true
  },
  "analyzed_functions": [
    {
      "name": "to_dict",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 69,
      "line_end": 78,
      "is_method": true,
      "class_name": "TestCaseResult",
      "complexity_score": 1,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def to_dict(self) -> Dict[str, Any]:\n        \"\"\"Convert to dictionary for JSON serialization\"\"\"\n        return {\n            \"name\": self.name,\n            \"status\": self.status,\n            \"exec..."
    },
    {
      "name": "__init__",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 98,
      "line_end": 100,
      "is_method": true,
      "class_name": "CodeAnalyzer",
      "complexity_score": 1,
      "has_type_hints": true,
      "has_docstring": false,
      "code_snippet": "    def __init__(self, project_root: Path):\n        self.project_root = project_root\n        self.builtin_types = {'int', 'str', 'float', 'bool', 'list', 'dict', 'tuple', 'set', 'bytes', 'None'}"
    },
    {
      "name": "extract_type_info",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 102,
      "line_end": 121,
      "is_method": true,
      "class_name": "CodeAnalyzer",
      "complexity_score": 6,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def extract_type_info(self, node: ast.FunctionDef) -> TypeInfo:\n        \"\"\"Extract comprehensive type information from function definition\"\"\"\n        type_info = TypeInfo()\n        \n        # Extr..."
    },
    {
      "name": "extract_imports_from_file",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 123,
      "line_end": 148,
      "is_method": true,
      "class_name": "CodeAnalyzer",
      "complexity_score": 10,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def extract_imports_from_file(self, file_path: Path) -> ImportInfo:\n        \"\"\"Extract all imports from a Python file\"\"\"\n        import_info = ImportInfo()\n        \n        try:\n            with o..."
    },
    {
      "name": "calculate_complexity_score",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 150,
      "line_end": 162,
      "is_method": true,
      "class_name": "CodeAnalyzer",
      "complexity_score": 5,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def calculate_complexity_score(self, node: ast.FunctionDef) -> int:\n        \"\"\"Calculate a simple complexity score for the function\"\"\"\n        score = 1\n        \n        for child in ast.walk(node..."
    },
    {
      "name": "__init__",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 167,
      "line_end": 168,
      "is_method": true,
      "class_name": "TestValidator",
      "complexity_score": 1,
      "has_type_hints": true,
      "has_docstring": false,
      "code_snippet": "    def __init__(self, project_root: Path):\n        self.project_root = project_root"
    },
    {
      "name": "validate_syntax",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 170,
      "line_end": 187,
      "is_method": true,
      "class_name": "TestValidator",
      "complexity_score": 4,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def validate_syntax(self, test_code: str) -> Tuple[bool, List[str]]:\n        \"\"\"Validate Python syntax of generated test code\"\"\"\n        errors = []\n        \n        try:\n            # First, try ..."
    },
    {
      "name": "validate_imports",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 189,
      "line_end": 211,
      "is_method": true,
      "class_name": "TestValidator",
      "complexity_score": 10,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def validate_imports(self, test_code: str, available_modules: Set[str]) -> Tuple[bool, List[str]]:\n        \"\"\"Validate that all imports in test code are available\"\"\"\n        errors = []\n        \n ..."
    },
    {
      "name": "__init__",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 217,
      "line_end": 233,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 1,
      "has_type_hints": false,
      "has_docstring": false,
      "code_snippet": "    def __init__(self):\n        self.project_root = Path(os.getcwd())\n        sys.path.insert(0, str(self.project_root))\n        \n        self.test_dir = self.project_root / DEFAULT_TEST_DIR\n        s..."
    },
    {
      "name": "_log",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 235,
      "line_end": 240,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 1,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _log(self, message: str, level: str = \"INFO\"):\n        \"\"\"Add a log entry with timestamp\"\"\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        log_entry = f\"[{timestamp}]..."
    },
    {
      "name": "_get_changed_files",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 242,
      "line_end": 251,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 2,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _get_changed_files(self) -> List[str]:\n        \"\"\"Gets changed files from the GITHUB_ENV variable.\"\"\"\n        changed_files_str = os.environ.get(\"CHANGED_FILES\", \"\")\n        if not changed_fil..."
    },
    {
      "name": "_extract_functions_from_file",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 253,
      "line_end": 322,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 10,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _extract_functions_from_file(self, file_path: Path) -> List[FunctionInfo]:\n        \"\"\"Enhanced function extraction with detailed analysis\"\"\"\n        functions = []\n        \n        try:\n      ..."
    },
    {
      "name": "_build_comprehensive_prompt",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 324,
      "line_end": 479,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 10,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _build_comprehensive_prompt(self, functions: List[FunctionInfo]) -> str:\n        \"\"\"Build a comprehensive, structured prompt for better test generation\"\"\"\n        \n        # Analyze all functi..."
    },
    {
      "name": "_invoke_llm_for_generation",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 481,
      "line_end": 532,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 10,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _invoke_llm_for_generation(self, prompt: str, max_retries: int = 3) -> str:\n        \"\"\"Enhanced LLM invocation with retry logic and validation\"\"\"\n        \n        for attempt in range(max_retr..."
    },
    {
      "name": "_generate_test_suite",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 534,
      "line_end": 555,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 4,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _generate_test_suite(self, functions: List[FunctionInfo]) -> str:\n        \"\"\"Generate test suite with enhanced validation\"\"\"\n        if not functions:\n            return \"\"\n\n        # Build co..."
    },
    {
      "name": "_fix_common_syntax_issues",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 557,
      "line_end": 578,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 9,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _fix_common_syntax_issues(self, code: str) -> str:\n        \"\"\"Fix common syntax issues in generated code\"\"\"\n        lines = code.split('\\n')\n        fixed_lines = []\n        \n        for line ..."
    },
    {
      "name": "_format_python_code",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 580,
      "line_end": 608,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 6,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _format_python_code(self, file_path: Path):\n        \"\"\"Enhanced code formatting with validation\"\"\"\n        try:\n            # First, validate the file can be parsed\n            with open(file_..."
    },
    {
      "name": "_parse_test_output",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 610,
      "line_end": 694,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 10,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _parse_test_output(self, test_output: str, test_stderr: str) -> List[TestCaseResult]:\n        \"\"\"Parse unittest output to extract individual test case results\"\"\"\n        test_cases = []\n      ..."
    },
    {
      "name": "_extract_test_methods_from_file",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 696,
      "line_end": 718,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 7,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _extract_test_methods_from_file(self) -> List[TestCaseResult]:\n        \"\"\"Extract test method names from the generated test file\"\"\"\n        test_cases = []\n        test_file_path = self.test_d..."
    },
    {
      "name": "_execute_tests",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 720,
      "line_end": 823,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 9,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _execute_tests(self, test_file_path: Path, changed_files: List[str]) -> Dict[str, Any]:\n        \"\"\"Enhanced test execution with better error handling\"\"\"\n        self._log(f\"🧪 Executing tests f..."
    },
    {
      "name": "_parse_coverage_metrics",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 825,
      "line_end": 850,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 7,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _parse_coverage_metrics(self, coverage_output: str) -> Dict[str, str]:\n        \"\"\"Enhanced coverage metrics parsing\"\"\"\n        metrics = {}\n        if not coverage_output:\n            return m..."
    },
    {
      "name": "_generate_json_report",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 852,
      "line_end": 883,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 2,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _generate_json_report(self, report: TestReport) -> str:\n        \"\"\"Enhanced JSON report generation\"\"\"\n        report_dict = {\n            \"title\": \"🚀 Python Project Test Automation Report\",\n  ..."
    },
    {
      "name": "_generate_xml_report",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 885,
      "line_end": 957,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 10,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _generate_xml_report(self, report: TestReport) -> str:\n        \"\"\"Enhanced XML report generation\"\"\"\n        root = ET.Element(\"test_automation_report\")\n        \n        # Header with additiona..."
    },
    {
      "name": "_generate_text_report",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 959,
      "line_end": 1065,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 10,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _generate_text_report(self, report: TestReport) -> str:\n        \"\"\"Enhanced human-readable text format report\"\"\"\n        lines = [\n            \"🚀 Python Project Test Automation Report\",\n      ..."
    },
    {
      "name": "_save_reports",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 1067,
      "line_end": 1091,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 1,
      "has_type_hints": true,
      "has_docstring": true,
      "code_snippet": "    def _save_reports(self, report: TestReport):\n        \"\"\"Save enhanced reports in multiple formats\"\"\"\n        timestamp_str = report.timestamp.replace(\":\", \"-\").replace(\" \", \"_\")\n        base_filen..."
    },
    {
      "name": "run",
      "file_path": "ci_pr_test_runner.py",
      "line_start": 1093,
      "line_end": 1270,
      "is_method": true,
      "class_name": "ChangeAnalyzerAndTester",
      "complexity_score": 10,
      "has_type_hints": false,
      "has_docstring": true,
      "code_snippet": "    def run(self):\n        \"\"\"Enhanced main runner with comprehensive validation\"\"\"\n        self._log(\"🚀 Starting Enhanced Python Project Test Automation\", \"INFO\")\n        \n        changed_files = sel..."
    },
    {
      "name": "setUp",
      "file_path": "tests_pr/pr_generated_tests.py",
      "line_start": 9,
      "line_end": 10,
      "is_method": true,
      "class_name": "TestGeneratedCode",
      "complexity_score": 1,
      "has_type_hints": false,
      "has_docstring": false,
      "code_snippet": "    def setUp(self):\n        pass"
    },
    {
      "name": "test_sum_three_numbers_normal_case",
      "file_path": "tests_pr/pr_generated_tests.py",
      "line_start": 12,
      "line_end": 14,
      "is_method": true,
      "class_name": "TestGeneratedCode",
      "complexity_score": 1,
      "has_type_hints": false,
      "has_docstring": false,
      "code_snippet": "    def test_sum_three_numbers_normal_case(self):\n        self.assertEqual(sum_three_numbers(1, 2, 3), 6)\n        self.assertEqual(sum_three_numbers(1.5, 2.5, 3.5), 7.5)"
    },
    {
      "name": "test_sum_three_numbers_edge_cases",
      "file_path": "tests_pr/pr_generated_tests.py",
      "line_start": 16,
      "line_end": 19,
      "is_method": true,
      "class_name": "TestGeneratedCode",
      "complexity_score": 1,
      "has_type_hints": false,
      "has_docstring": false,
      "code_snippet": "    def test_sum_three_numbers_edge_cases(self):\n        self.assertEqual(sum_three_numbers(0, 0, 0), 0)\n        self.assertEqual(sum_three_numbers(-1, -2, -3), -6)\n        self.assertEqual(sum_three_..."
    },
    {
      "name": "test_sum_three_numbers_type_validation",
      "file_path": "tests_pr/pr_generated_tests.py",
      "line_start": 21,
      "line_end": 23,
      "is_method": true,
      "class_name": "TestGeneratedCode",
      "complexity_score": 1,
      "has_type_hints": false,
      "has_docstring": false,
      "code_snippet": "    def test_sum_three_numbers_type_validation(self):\n        self.assertIsInstance(sum_three_numbers(1, 2, 3), int)\n        self.assertIsInstance(sum_three_numbers(1.5, 2.5, 3.5), float)"
    },
    {
      "name": "test_sum_three_numbers_error_cases",
      "file_path": "tests_pr/pr_generated_tests.py",
      "line_start": 25,
      "line_end": 31,
      "is_method": true,
      "class_name": "TestGeneratedCode",
      "complexity_score": 1,
      "has_type_hints": false,
      "has_docstring": false,
      "code_snippet": "    def test_sum_three_numbers_error_cases(self):\n        with self.assertRaises(TypeError):\n            sum_three_numbers('a', 2, 3)\n        with self.assertRaises(TypeError):\n            sum_three_n..."
    },
    {
      "name": "test_sum_three_numbers_none_values",
      "file_path": "tests_pr/pr_generated_tests.py",
      "line_start": 33,
      "line_end": 39,
      "is_method": true,
      "class_name": "TestGeneratedCode",
      "complexity_score": 1,
      "has_type_hints": false,
      "has_docstring": false,
      "code_snippet": "    def test_sum_three_numbers_none_values(self):\n        with self.assertRaises(TypeError):\n            sum_three_numbers(None, 2, 3)\n        with self.assertRaises(TypeError):\n            sum_three_..."
    }
  ],
  "test_results": {
    "status": "failure",
    "output": "Failed to generate test cases"
  },
  "test_cases": [],
  "coverage_metrics": {},
  "execution_logs": [
    "[2025-09-14 06:03:35] [INFO] 🚀 Starting Enhanced Python Project Test Automation",
    "[2025-09-14 06:03:35] [INFO] 📁 Detected 3 changed files: ci_pr_test_runner.py, reports/run_summary.txt, tests_pr/pr_generated_tests.py",
    "[2025-09-14 06:03:35] [INFO] 🔍 Analyzing changed file: ci_pr_test_runner.py",
    "[2025-09-14 06:03:35] [INFO] ✅ Found 26 functions/methods in ci_pr_test_runner.py",
    "[2025-09-14 06:03:35] [INFO] 🔍 Analyzing changed file: tests_pr/pr_generated_tests.py",
    "[2025-09-14 06:03:35] [INFO] ✅ Found 6 functions/methods in tests_pr/pr_generated_tests.py",
    "[2025-09-14 06:03:35] [INFO] 📊 Analysis Summary:",
    "[2025-09-14 06:03:35] [INFO]    Total Functions/Methods: 32",
    "[2025-09-14 06:03:35] [INFO]    Functions: 0, Methods: 32",
    "[2025-09-14 06:03:35] [INFO]    Average Complexity: 5.1/10",
    "[2025-09-14 06:03:35] [INFO] 🧠 Generating comprehensive test cases using llama-3.3-70b-versatile...",
    "[2025-09-14 06:03:35] [INFO] 🤖 Generating test code (attempt 1/3)...",
    "[2025-09-14 06:03:35] [ERROR] ❌ Error in LLM generation (attempt 1): Error code: 413 - {'error': {'message': 'Request too large for model `llama-3.3-70b-versatile` in organization `org_01k4vv26wrfy0a45edrkbynbm1` service tier `on_demand` on tokens per minute (TPM): Limit 12000, Requested 15982, please reduce your message size and try again. Need more tokens? Upgrade to Dev Tier today at https://console.groq.com/settings/billing', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}",
    "[2025-09-14 06:03:35] [INFO] 🤖 Generating test code (attempt 2/3)...",
    "[2025-09-14 06:03:36] [ERROR] ❌ Error in LLM generation (attempt 2): Error code: 413 - {'error': {'message': 'Request too large for model `llama-3.3-70b-versatile` in organization `org_01k4vv26wrfy0a45edrkbynbm1` service tier `on_demand` on tokens per minute (TPM): Limit 12000, Requested 15982, please reduce your message size and try again. Need more tokens? Upgrade to Dev Tier today at https://console.groq.com/settings/billing', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}",
    "[2025-09-14 06:03:36] [INFO] 🤖 Generating test code (attempt 3/3)...",
    "[2025-09-14 06:03:36] [ERROR] ❌ Error in LLM generation (attempt 3): Error code: 413 - {'error': {'message': 'Request too large for model `llama-3.3-70b-versatile` in organization `org_01k4vv26wrfy0a45edrkbynbm1` service tier `on_demand` on tokens per minute (TPM): Limit 12000, Requested 15982, please reduce your message size and try again. Need more tokens? Upgrade to Dev Tier today at https://console.groq.com/settings/billing', 'type': 'tokens', 'code': 'rate_limit_exceeded'}}",
    "[2025-09-14 06:03:36] [ERROR] ❌ Failed to generate test cases. Aborting."
  ]
}