<test_automation_report><header><title>🚀 Python Project Test Automation Report</title><generated>2025-09-14 06:24:10</generated><model_name>llama-3.3-70b-versatile</model_name><execution_time_seconds>2.514954</execution_time_seconds><status>FAILED</status></header><syntax_validation><validation test="main.py">True</validation><validation test="tests_pr/pr_generated_tests.py">True</validation><validation test="generated_test_file">True</validation></syntax_validation><analyzed_functions><count>13</count><function><name>add_numbers</name><file_path>main.py</file_path><line_start>4</line_start><line_end>5</line_end><is_method>False</is_method><complexity_score>1</complexity_score><code_snippet>def add_numbers(a, b):
    return a + b</code_snippet></function><function><name>multiply_numbers</name><file_path>main.py</file_path><line_start>7</line_start><line_end>8</line_end><is_method>False</is_method><complexity_score>1</complexity_score><code_snippet>def multiply_numbers(a, b):
    return a * b</code_snippet></function><function><name>setUp</name><file_path>tests_pr/pr_generated_tests.py</file_path><line_start>13</line_start><line_end>14</line_end><is_method>True</is_method><complexity_score>1</complexity_score><class_name>TestGeneratedCode</class_name><code_snippet>    def setUp(self):
        pass</code_snippet></function><function><name>test_add_numbers_normal_cases</name><file_path>tests_pr/pr_generated_tests.py</file_path><line_start>16</line_start><line_end>20</line_end><is_method>True</is_method><complexity_score>1</complexity_score><class_name>TestGeneratedCode</class_name><code_snippet>    def test_add_numbers_normal_cases(self):
        self.assertEqual(add_numbers(1, 2), 3)
        self.assertEqual(add_numbers(1.5, 2.5), 4.0)
        self.assertEqual(add_numbers(-1, -2), -3)
     ...</code_snippet></function><function><name>test_add_numbers_edge_cases</name><file_path>tests_pr/pr_generated_tests.py</file_path><line_start>22</line_start><line_end>25</line_end><is_method>True</is_method><complexity_score>1</complexity_score><class_name>TestGeneratedCode</class_name><code_snippet>    def test_add_numbers_edge_cases(self):
        self.assertEqual(add_numbers(0, 0), 0)
        self.assertEqual(add_numbers(1, 0), 1)
        self.assertEqual(add_numbers(0, 1), 1)</code_snippet></function><function><name>test_add_numbers_error_cases</name><file_path>tests_pr/pr_generated_tests.py</file_path><line_start>27</line_start><line_end>31</line_end><is_method>True</is_method><complexity_score>1</complexity_score><class_name>TestGeneratedCode</class_name><code_snippet>    def test_add_numbers_error_cases(self):
        with self.assertRaises(TypeError):
            add_numbers('a', 2)
        with self.assertRaises(TypeError):
            add_numbers(1, 'b')</code_snippet></function><function><name>test_is_prime_normal_cases</name><file_path>tests_pr/pr_generated_tests.py</file_path><line_start>33</line_start><line_end>37</line_end><is_method>True</is_method><complexity_score>1</complexity_score><class_name>TestGeneratedCode</class_name><code_snippet>    def test_is_prime_normal_cases(self):
        self.assertTrue(is_prime(2))
        self.assertTrue(is_prime(3))
        self.assertTrue(is_prime(5))
        self.assertTrue(is_prime(7))</code_snippet></function><function><name>test_is_prime_edge_cases</name><file_path>tests_pr/pr_generated_tests.py</file_path><line_start>39</line_start><line_end>43</line_end><is_method>True</is_method><complexity_score>1</complexity_score><class_name>TestGeneratedCode</class_name><code_snippet>    def test_is_prime_edge_cases(self):
        self.assertFalse(is_prime(1))
        self.assertFalse(is_prime(4))
        self.assertFalse(is_prime(6))
        self.assertFalse(is_prime(8))</code_snippet></function><function><name>test_is_prime_error_cases</name><file_path>tests_pr/pr_generated_tests.py</file_path><line_start>45</line_start><line_end>49</line_end><is_method>True</is_method><complexity_score>1</complexity_score><class_name>TestGeneratedCode</class_name><code_snippet>    def test_is_prime_error_cases(self):
        with self.assertRaises(TypeError):
            is_prime('a')
        with self.assertRaises(TypeError):
            is_prime(1.5)</code_snippet></function><function><name>test_sum_three_numbers_normal_cases</name><file_path>tests_pr/pr_generated_tests.py</file_path><line_start>51</line_start><line_end>55</line_end><is_method>True</is_method><complexity_score>1</complexity_score><class_name>TestGeneratedCode</class_name><code_snippet>    def test_sum_three_numbers_normal_cases(self):
        self.assertEqual(sum_three_numbers(1, 2, 3), 6)
        self.assertEqual(sum_three_numbers(1.5, 2.5, 3.5), 7.5)
        self.assertEqual(sum_...</code_snippet></function><function><name>test_sum_three_numbers_edge_cases</name><file_path>tests_pr/pr_generated_tests.py</file_path><line_start>57</line_start><line_end>61</line_end><is_method>True</is_method><complexity_score>1</complexity_score><class_name>TestGeneratedCode</class_name><code_snippet>    def test_sum_three_numbers_edge_cases(self):
        self.assertEqual(sum_three_numbers(0, 0, 0), 0)
        self.assertEqual(sum_three_numbers(1, 0, 0), 1)
        self.assertEqual(sum_three_numb...</code_snippet></function><function><name>test_sum_three_numbers_error_cases</name><file_path>tests_pr/pr_generated_tests.py</file_path><line_start>63</line_start><line_end>69</line_end><is_method>True</is_method><complexity_score>1</complexity_score><class_name>TestGeneratedCode</class_name><code_snippet>    def test_sum_three_numbers_error_cases(self):
        with self.assertRaises(TypeError):
            sum_three_numbers('a', 2, 3)
        with self.assertRaises(TypeError):
            sum_three_n...</code_snippet></function><function><name>test_sum_three_numbers_type_validation</name><file_path>tests_pr/pr_generated_tests.py</file_path><line_start>71</line_start><line_end>73</line_end><is_method>True</is_method><complexity_score>1</complexity_score><class_name>TestGeneratedCode</class_name><code_snippet>    def test_sum_three_numbers_type_validation(self):
        self.assertIsInstance(sum_three_numbers(1, 2, 3), (int, float))
        self.assertIsInstance(sum_three_numbers(1.5, 2.5, 3.5), (int, floa...</code_snippet></function></analyzed_functions><test_results><status>failure</status><output>Traceback (most recent call last):
  File "/home/runner/work/check-python-tests/check-python-tests/tests_pr/pr_generated_tests.py", line 9, in &lt;module&gt;
    from main import add_numbers, is_prime, multiply_numbers
ImportError: cannot import name 'is_prime' from 'main' (/home/runner/work/check-python-tests/check-python-tests/main.py)
</output><coverage_report>Name                                                                      Stmts   Miss  Cover
---------------------------------------------------------------------------------------------
/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/main.py     162    133    18%
main.py                                                                       4      2    50%
tests_pr/pr_generated_tests.py                                               77     68    12%
---------------------------------------------------------------------------------------------
TOTAL                                                                       243    203    16%
</coverage_report></test_results><test_cases><test_case name="test_add_numbers_normal_cases" status="PASS"><test_method>test_add_numbers_normal_cases</test_method></test_case><test_case name="test_add_numbers_edge_cases" status="PASS"><test_method>test_add_numbers_edge_cases</test_method></test_case><test_case name="test_add_numbers_error_cases" status="PASS"><test_method>test_add_numbers_error_cases</test_method></test_case><test_case name="test_multiply_numbers_normal_cases" status="PASS"><test_method>test_multiply_numbers_normal_cases</test_method></test_case><test_case name="test_multiply_numbers_edge_cases" status="PASS"><test_method>test_multiply_numbers_edge_cases</test_method></test_case><test_case name="test_multiply_numbers_error_cases" status="PASS"><test_method>test_multiply_numbers_error_cases</test_method></test_case><test_case name="test_is_prime_normal_cases" status="PASS"><test_method>test_is_prime_normal_cases</test_method></test_case><test_case name="test_is_prime_edge_cases" status="PASS"><test_method>test_is_prime_edge_cases</test_method></test_case><test_case name="test_is_prime_error_cases" status="PASS"><test_method>test_is_prime_error_cases</test_method></test_case><test_case name="test_sum_three_numbers_normal_cases" status="PASS"><test_method>test_sum_three_numbers_normal_cases</test_method></test_case><test_case name="test_sum_three_numbers_edge_cases" status="PASS"><test_method>test_sum_three_numbers_edge_cases</test_method></test_case><test_case name="test_sum_three_numbers_error_cases" status="PASS"><test_method>test_sum_three_numbers_error_cases</test_method></test_case><test_case name="test_sum_three_numbers_type_validation" status="PASS"><test_method>test_sum_three_numbers_type_validation</test_method></test_case></test_cases><coverage_metrics><metric name="total_coverage">16</metric><metric name="total_statements">243</metric><metric name="missing_statements">203</metric></coverage_metrics><execution_logs><count>25</count><log>[2025-09-14 06:24:07] [INFO] 🚀 Starting Enhanced Python Project Test Automation</log><log>[2025-09-14 06:24:07] [INFO] 📁 Detected 6 changed files: main.py, reports/run_summary.txt, reports/test_automation_report_2025-09-14_06-20-32.json, reports/test_automation_report_2025-09-14_06-20-32.txt, reports/test_automation_report_2025-09-14_06-20-32.xml, tests_pr/pr_generated_tests.py</log><log>[2025-09-14 06:24:07] [INFO] 🔍 Analyzing changed file: main.py</log><log>[2025-09-14 06:24:07] [INFO] ✅ Found 2 functions/methods in main.py</log><log>[2025-09-14 06:24:07] [INFO] 🔍 Analyzing changed file: tests_pr/pr_generated_tests.py</log><log>[2025-09-14 06:24:07] [INFO] ✅ Found 11 functions/methods in tests_pr/pr_generated_tests.py</log><log>[2025-09-14 06:24:07] [INFO] 📊 Analysis Summary:</log><log>[2025-09-14 06:24:07] [INFO]    Total Functions/Methods: 13</log><log>[2025-09-14 06:24:07] [INFO]    Functions: 2, Methods: 11</log><log>[2025-09-14 06:24:07] [INFO]    Average Complexity: 1.0/10</log><log>[2025-09-14 06:24:07] [INFO] 🧠 Generating comprehensive test cases using llama-3.3-70b-versatile...</log><log>[2025-09-14 06:24:07] [INFO] 🤖 Generating test code (attempt 1/3)...</log><log>[2025-09-14 06:24:09] [SUCCESS] ✅ Generated syntactically valid test code</log><log>[2025-09-14 06:24:09] [INFO] ✔️ Formatted: pr_generated_tests.py</log><log>[2025-09-14 06:24:09] [SUCCESS] ✅ Generated and saved syntactically valid tests to /home/runner/work/check-python-tests/check-python-tests/tests_pr/pr_generated_tests.py</log><log>[2025-09-14 06:24:09] [INFO] 🏃 Executing generated tests with comprehensive coverage analysis...</log><log>[2025-09-14 06:24:09] [INFO] 🧪 Executing tests from /home/runner/work/check-python-tests/check-python-tests/tests_pr/pr_generated_tests.py</log><log>[2025-09-14 06:24:10] [ERROR] ❌ Tests failed.</log><log>[2025-09-14 06:24:10] [ERROR] --- Test Output ---</log><log>[2025-09-14 06:24:10] [ERROR] </log><log>[2025-09-14 06:24:10] [ERROR] Traceback (most recent call last):
  File "/home/runner/work/check-python-tests/check-python-tests/tests_pr/pr_generated_tests.py", line 9, in &lt;module&gt;
    from main import add_numbers, is_prime, multiply_numbers
ImportError: cannot import name 'is_prime' from 'main' (/home/runner/work/check-python-tests/check-python-tests/main.py)
</log><log>[2025-09-14 06:24:10] [ERROR] -------------------</log><log>[2025-09-14 06:24:10] [INFO] 
🎯 Code Coverage: 16%</log><log>[2025-09-14 06:24:10] [WARNING] 🔴 Low coverage, significant testing improvements needed</log><log>[2025-09-14 06:24:10] [INFO] 📄 JSON report saved: /home/runner/work/check-python-tests/check-python-tests/reports/test_automation_report_2025-09-14_06-24-10.json</log></execution_logs></test_automation_report>